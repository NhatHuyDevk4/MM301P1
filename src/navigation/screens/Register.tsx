import { View, Text, KeyboardAvoidingView, Platform, ScrollView, TextInput, TouchableOpacity, Alert } from 'react-native'
import React, { useState } from 'react'
import { styles } from '../../styles/Login'
import { useNavigation } from '@react-navigation/native'
import { saveToken } from '../../untils/tokenManager'
import { Ionicons } from '@expo/vector-icons'
import Toast from 'react-native-toast-message'
import { authApi } from '../../service/authApi'

const Register = () => {

    const [authenform, setAuthenform] = useState({
        name: '',
        email: '',
        password: '',
    })
    const [emailFocused, setEmailFocused] = useState(false)
    const [passwordFocused, setPasswordFocused] = useState(false)
    const navigation = useNavigation()
    const [showPassword, setShowPassword] = useState(false)
    const [confirmShowPassword, setConfirmShowPassword] = useState(false)

    // X·ª≠ l√Ω ƒëƒÉng nh·∫≠p

    const handleLogin = async () => {
        if (!authenform.email || !authenform.password || !authenform.name) {
            Alert.alert('L·ªói', 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß email v√† m·∫≠t kh·∫©u')
            return
        }

        console.log("authenform", authenform)

        try {
            const data = await authApi.registerAuth(authenform)
            console.log("data", data)

            if (!data) {
                Toast.show({
                    type: 'error',
                    text1: 'ƒêƒÉng k√Ω th·∫•t b·∫°i',
                    text2: 'Vui l√≤ng th·ª≠ l·∫°i sau.'
                })
                return;
            }

            if (data.success === false) {
                Toast.show({
                    type: 'error',
                    text1: 'ƒêƒÉng k√Ω th·∫•t b·∫°i',
                    text2: data.message || 'Vui l√≤ng th·ª≠ l·∫°i sau.'
                })
                return;
            }
            if (data.success === true) {
                // L∆∞u token v√†o AsyncStorage
                await saveToken(data.accessToken)
                Toast.show({
                    type: 'success',
                    text1: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
                    text2: 'Ch√∫c m·ª´ng b·∫°n ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng.'
                })
                navigation.navigate('Login' as never) //
            }
        } catch (error) {
            console.log("error", error)
            Toast.show({
                type: 'error',
                text1: 'ƒêƒÉng k√Ω th·∫•t b·∫°i',
                text2: 'Vui l√≤ng th·ª≠ l·∫°i sau.'
            })
        }
    }

    console.log("authenform", authenform.email, authenform.password, authenform.name)

    return (
        <KeyboardAvoidingView
            style={{
                flex: 1
            }}
            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        >
            <ScrollView
                contentContainerStyle={{
                    flexGrow: 1,
                }}
                showsVerticalScrollIndicator={false}
            >
                <View style={styles.container}>
                    <View style={styles.gradient} />

                    <View style={styles.content}>
                        {/* Logo */}
                        <View style={styles.logo}>
                            <Text style={styles.logoText}>üì± MyApp</Text>
                        </View>

                        <Text style={styles.subTitle}>
                            ƒêƒÉng k√Ω ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng ·ª©ng d·ª•ng ngay n√†o!
                        </Text>

                        <View style={styles.inputContainer}>
                            <Text style={styles.label}>T√™n ng∆∞·ªùi d√πng</Text>
                            <TextInput
                                style={[
                                    styles.input,
                                    emailFocused && styles.inputFocused
                                ]}
                                placeholder="Nh·∫≠p t√™n ng∆∞·ªùi d√πng"
                                placeholderTextColor="#9CA3AF"
                                value={authenform.name}
                                onChangeText={(text) => setAuthenform({ ...authenform, name: text })}
                                onFocus={() => setEmailFocused(true)}
                                onBlur={() => setEmailFocused(false)}
                                autoCapitalize="none"
                                autoCorrect={false}
                            />
                        </View>

                        {/* Email Input */}
                        <View style={styles.inputContainer}>
                            <Text style={styles.label}>Email</Text>
                            <TextInput
                                style={[
                                    styles.input,
                                    emailFocused && styles.inputFocused
                                ]}
                                placeholder="Nh·∫≠p email c·ªßa b·∫°n"
                                placeholderTextColor="#9CA3AF"
                                value={authenform.email}
                                onChangeText={(text) => setAuthenform({ ...authenform, email: text })}
                                onFocus={() => setEmailFocused(true)}
                                onBlur={() => setEmailFocused(false)}
                                keyboardType="email-address"
                                autoCapitalize="none"
                                autoCorrect={false}
                            />
                        </View>

                        {/* Password Input */}
                        <View style={styles.inputContainer}>
                            <Text style={styles.label}>M·∫≠t kh·∫©u</Text>
                            <TextInput
                                style={[
                                    styles.input,
                                    passwordFocused && styles.inputFocused,
                                    { paddingRight: 40 } // ƒê·ªÉ tr√°nh ch·ªØ nh·∫≠p b·ªã che b·ªüi icon
                                ]}
                                placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                                placeholderTextColor="#9CA3AF"
                                value={authenform.password}
                                onChangeText={(text) => setAuthenform({ ...authenform, password: text })}
                                onFocus={() => setPasswordFocused(true)}
                                onBlur={() => setPasswordFocused(false)}
                                secureTextEntry={!showPassword} // Hi·ªán/·∫©n m·∫≠t kh·∫©u
                                autoCapitalize="none"
                                autoCorrect={false}
                            />
                            <TouchableOpacity
                                style={styles.eyeIcon}
                            >
                                <Ionicons
                                    name={showPassword ? 'eye-off' : 'eye'}
                                    size={24}

                                    color="gray"
                                    onPress={() => setShowPassword(!showPassword)}
                                />
                            </TouchableOpacity>
                        </View>

                        <View style={styles.inputContainer}>
                            <Text style={styles.label}>X√°c nh·∫≠n m·∫≠t kh·∫©u</Text>
                            <TextInput
                                style={[
                                    styles.input,
                                    passwordFocused && styles.inputFocused
                                ]}
                                placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                                placeholderTextColor="#9CA3AF"
                                secureTextEntry={!confirmShowPassword} // Hi·ªán/·∫©n m·∫≠t kh·∫©u
                                autoCapitalize="none"
                                autoCorrect={false}
                            />
                            <TouchableOpacity
                                style={styles.eyeIcon}
                            >
                                <Ionicons
                                    name={confirmShowPassword ? 'eye-off' : 'eye'}
                                    size={24}
                                    color="gray"
                                    onPress={() => setConfirmShowPassword(!confirmShowPassword)}
                                />
                            </TouchableOpacity>
                        </View>

                        {/* Login Button */}
                        <TouchableOpacity
                            style={styles.loginButton}
                            onPress={handleLogin}
                            activeOpacity={0.8}
                        >
                            <Text style={styles.loginButtonText}>ƒêƒÉng k√Ω</Text>
                        </TouchableOpacity>

                        {/* Sign up link */}
                        <View style={styles.signupContainer}>
                            <Text style={styles.signupText}>B·∫°n ƒë√£ c√≥ t√†i kho·∫£n</Text>
                            <TouchableOpacity onPress={() => navigation.navigate('Login' as never)}>
                                <Text style={styles.signupLink}>ƒêƒÉng nh·∫≠p ngay</Text>
                            </TouchableOpacity>
                        </View>
                    </View>
                </View>
            </ScrollView>
        </KeyboardAvoidingView>
    )
}

export default Register

// KeyboardAvoidingView : Gi√∫p tr√°nh b·ªã che b·ªüi b√†n ph√≠m ·∫£o khi nh·∫≠p li·ªáu
// T·ª©c l√† khi b√†n ph√≠m ·∫£o hi·ªán l√™n,
// n√≥ s·∫Ω ƒë·∫©y n·ªôi dung l√™n tr√™n ƒë·ªÉ tr√°nh b·ªã che khu·∫•t b·ªüi b√†n ph√≠m.

// behavior = { Platform.OS === 'ios' ? 'padding' : 'height' }
// - N·∫øu tr√™n iOS, s·ª≠ d·ª•ng 'padding' ƒë·ªÉ
// th√™m kho·∫£ng ƒë·ªám v√†o d∆∞·ªõi c√πng c·ªßa view khi b√†n ph√≠m xu·∫•t hi·ªán.
// - N·∫øu tr√™n Android, s·ª≠ d·ª•ng 'height'
// ƒë·ªÉ thay ƒë·ªïi chi·ªÅu cao c·ªßa view khi b√†n ph√≠m xu·∫•t hi·ªán.